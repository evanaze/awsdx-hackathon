❯ meltano config tap-spreadsheets-anywhere set --interactive
2022-10-31T02:40:44.160283Z [error    ] (sqlite3.OperationalError) duplicate column name: resource_type
[SQL: ALTER TABLE embed_tokens ADD COLUMN resource_type VARCHAR]
(Background on this error at: https://sqlalche.me/e/14/e3q8) 
╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py: │
│ 1900 in _execute_context                                                                         │
│                                                                                                  │
│   1897 │   │   │   │   │   │   │   evt_handled = True                                            │
│   1898 │   │   │   │   │   │   │   break                                                         │
│   1899 │   │   │   │   if not evt_handled:                                                       │
│ ❱ 1900 │   │   │   │   │   self.dialect.do_execute(                                              │
│   1901 │   │   │   │   │   │   cursor, statement, parameters, context                            │
│   1902 │   │   │   │   │   )                                                                     │
│   1903                                                                                           │
│                                                                                                  │
│ ╭─────────────────────────────────────────── locals ───────────────────────────────────────────╮ │
│ │              args = (                                                                        │ │
│ │                     │   <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at         │ │
│ │                     0x7f15d1fa5d00>,                                                         │ │
│ │                     )                                                                        │ │
│ │          branched = <sqlalchemy.engine.base.Connection object at 0x7f15d237cfa0>             │ │
│ │              conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7f15d21c9550>         │ │
│ │       constructor = <bound method DefaultExecutionContext._init_ddl of <class                │ │
│ │                     'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>               │ │
│ │           context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at        │ │
│ │                     0x7f15d1fa5e80>                                                          │ │
│ │            cursor = <sqlite3.Cursor object at 0x7f15d21c6a40>                                │ │
│ │           dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at    │ │
│ │                     0x7f15d221a520>                                                          │ │
│ │       evt_handled = False                                                                    │ │
│ │ execution_options = immutabledict({'autocommit': True})                                      │ │
│ │                kw = {}                                                                       │ │
│ │        parameters = ()                                                                       │ │
│ │              self = <sqlalchemy.engine.base.Connection object at 0x7f15d237cfa0>             │ │
│ │         statement = 'ALTER TABLE embed_tokens ADD COLUMN resource_type VARCHAR'              │ │
│ │                yp = None                                                                     │ │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────╯ │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/sqlalchemy/engine/default. │
│ py:736 in do_execute                                                                             │
│                                                                                                  │
│    733 │   │   cursor.executemany(statement, parameters)                                         │
│    734 │                                                                                         │
│    735 │   def do_execute(self, cursor, statement, parameters, context=None):                    │
│ ❱  736 │   │   cursor.execute(statement, parameters)                                             │
│    737 │                                                                                         │
│    738 │   def do_execute_no_params(self, cursor, statement, context=None):                      │
│    739 │   │   cursor.execute(statement)                                                         │
│                                                                                                  │
│ ╭─────────────────────────────────────────── locals ───────────────────────────────────────────╮ │
│ │    context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at               │ │
│ │              0x7f15d1fa5e80>                                                                 │ │
│ │     cursor = <sqlite3.Cursor object at 0x7f15d21c6a40>                                       │ │
│ │ parameters = ()                                                                              │ │
│ │       self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at           │ │
│ │              0x7f15d221a520>                                                                 │ │
│ │  statement = 'ALTER TABLE embed_tokens ADD COLUMN resource_type VARCHAR'                     │ │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────╯ │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
OperationalError: duplicate column name: resource_type

The above exception was the direct cause of the following exception:

╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/meltano/core/migration_ser │
│ vice.py:96 in upgrade                                                                            │
│                                                                                                  │
│    93 │   │   │                                                                                  │
│    94 │   │   │   if not silent:                                                                 │
│    95 │   │   │   │   click.secho(f"Upgrading database to {head}")                               │
│ ❱  96 │   │   │   command.upgrade(cfg, head)                                                     │
│    97 │   │   │                                                                                  │
│    98 │   │   │   if silent:                                                                     │
│    99 │   │   │   │   migration_logger.setLevel(original_log_level)                              │
│                                                                                                  │
│ ╭─────────────────────────────────────────── locals ───────────────────────────────────────────╮ │
│ │                cfg = <alembic.config.Config object at 0x7f15d21c9490>                        │ │
│ │               conn = <sqlalchemy.engine.base.Connection object at 0x7f15d237cfa0>            │ │
│ │            context = <alembic.runtime.migration.MigrationContext object at 0x7f15d21c9af0>   │ │
│ │                err = OperationalError('(sqlite3.OperationalError) duplicate column name:     │ │
│ │                      resource_type')                                                         │ │
│ │               head = '6828cc5b1a4f'                                                          │ │
│ │   migration_logger = <_FixedFindCallerLogger alembic.runtime.migration (ERROR)>              │ │
│ │ original_log_level = 20                                                                      │ │
│ │             script = <alembic.script.base.ScriptDirectory object at 0x7f15d21c9a60>          │ │
│ │               self = <meltano.core.migration_service.MigrationService object at              │ │
│ │                      0x7f15d22a2970>                                                         │ │
│ │             silent = True                                                                    │ │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────╯ │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/alembic/command.py:322 in  │
│ upgrade                                                                                          │
│                                                                                                  │
│   319 │   │   destination_rev=revision,                                                          │
│   320 │   │   tag=tag,                                                                           │
│   321 │   ):                                                                                     │
│ ❱ 322 │   │   script.run_env()                                                                   │
│   323                                                                                            │
│   324                                                                                            │
│   325 def downgrade(                                                                             │
│                                                                                                  │
│ ╭─────────────────────────────────── locals ────────────────────────────────────╮                │
│ │       config = <alembic.config.Config object at 0x7f15d21c9490>               │                │
│ │     revision = '6828cc5b1a4f'                                                 │                │
│ │       script = <alembic.script.base.ScriptDirectory object at 0x7f15d21c9610> │                │
│ │          sql = False                                                          │                │
│ │ starting_rev = None                                                           │                │
│ │          tag = None                                                           │                │
│ │      upgrade = <function upgrade.<locals>.upgrade at 0x7f15d21ccaf0>          │                │
│ ╰───────────────────────────────────────────────────────────────────────────────╯                │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/alembic/script/base.py:569 │
│ in run_env                                                                                       │
│                                                                                                  │
│    566 │   │                                                                                     │
│    567 │   │                                                                                     │
│    568 │   │   """                                                                               │
│ ❱  569 │   │   util.load_python_file(self.dir, "env.py")                                         │
│    570 │                                                                                         │
│    571 │   @property                                                                             │
│    572 │   def env_py_location(self):                                                            │
│                                                                                                  │
│ ╭─────────────────────────────── locals ────────────────────────────────╮                        │
│ │ self = <alembic.script.base.ScriptDirectory object at 0x7f15d21c9610> │                        │
│ ╰───────────────────────────────────────────────────────────────────────╯                        │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/alembic/util/pyfiles.py:94 │
│ in load_python_file                                                                              │
│                                                                                                  │
│    91 │   _, ext = os.path.splitext(filename)                                                    │
│    92 │   if ext == ".py":                                                                       │
│    93 │   │   if os.path.exists(path):                                                           │
│ ❱  94 │   │   │   module = load_module_py(module_id, path)                                       │
│    95 │   │   else:                                                                              │
│    96 │   │   │   pyc_path = pyc_file_from_path(path)                                            │
│    97 │   │   │   if pyc_path is None:                                                           │
│                                                                                                  │
│ ╭─────────────────────────────────────────── locals ───────────────────────────────────────────╮ │
│ │         _ = 'env'                                                                            │ │
│ │      dir_ = '/home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/meltano/… │ │
│ │       ext = '.py'                                                                            │ │
│ │  filename = 'env.py'                                                                         │ │
│ │ module_id = 'env_py'                                                                         │ │
│ │      path = '/home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/meltano/… │ │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────╯ │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/alembic/util/pyfiles.py:11 │
│ 0 in load_module_py                                                                              │
│                                                                                                  │
│   107 │   spec = importlib.util.spec_from_file_location(module_id, path)                         │
│   108 │   assert spec                                                                            │
│   109 │   module = importlib.util.module_from_spec(spec)                                         │
│ ❱ 110 │   spec.loader.exec_module(module)  # type: ignore                                        │
│   111 │   return module                                                                          │
│   112                                                                                            │
│                                                                                                  │
│ ╭─────────────────────────────────────────── locals ───────────────────────────────────────────╮ │
│ │    module = <module 'env_py' from                                                            │ │
│ │             '/home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/meltano/… │ │
│ │ module_id = 'env_py'                                                                         │ │
│ │      path = '/home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/meltano/… │ │
│ │      spec = ModuleSpec(name='env_py', loader=<_frozen_importlib_external.SourceFileLoader    │ │
│ │             object at 0x7f15d1ff50a0>,                                                       │ │
│ │             origin='/home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/m… │ │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────╯ │
│ <frozen importlib._bootstrap_external>:843 in exec_module                                        │
│ ╭─────────────────────────────────────────── locals ───────────────────────────────────────────╮ │
│ │   code = <code object <module> at 0x7f15d1ff1f50, file                                       │ │
│ │          "/home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/meltano/mig… │ │
│ │          line 1>                                                                             │ │
│ │ module = <module 'env_py' from                                                               │ │
│ │          '/home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/meltano/mig… │ │
│ │   self = <_frozen_importlib_external.SourceFileLoader object at 0x7f15d1ff50a0>              │ │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────╯ │
│ <frozen importlib._bootstrap>:219 in _call_with_frames_removed                                   │
│ ╭─────────────────────────────────────────── locals ───────────────────────────────────────────╮ │
│ │ args = (                                                                                     │ │
│ │        │   <code object <module> at 0x7f15d1ff1f50, file                                     │ │
│ │        "/home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/meltano/migra… │ │
│ │        line 1>,                                                                              │ │
│ │        │   {                                                                                 │ │
│ │        │   │   '__name__': 'env_py',                                                         │ │
│ │        │   │   '__doc__': None,                                                              │ │
│ │        │   │   '__package__': '',                                                            │ │
│ │        │   │   '__loader__': <_frozen_importlib_external.SourceFileLoader object at          │ │
│ │        0x7f15d1ff50a0>,                                                                      │ │
│ │        │   │   '__spec__': ModuleSpec(name='env_py',                                         │ │
│ │        loader=<_frozen_importlib_external.SourceFileLoader object at 0x7f15d1ff50a0>,        │ │
│ │        origin='/home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/meltan… │ │
│ │        │   │   '__file__':                                                                   │ │
│ │        '/home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/meltano/mi'+1… │ │
│ │        │   │   '__cached__':                                                                 │ │
│ │        '/home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/meltano/mi'+3… │ │
│ │        │   │   '__builtins__': {                                                             │ │
│ │        │   │   │   '__name__': 'builtins',                                                   │ │
│ │        │   │   │   '__doc__': 'Built-in functions, exceptions, and other                     │ │
│ │        objects.\n\nNoteworthy: None is the `nil'+46,                                         │ │
│ │        │   │   │   '__package__': '',                                                        │ │
│ │        │   │   │   '__loader__': <class '_frozen_importlib.BuiltinImporter'>,                │ │
│ │        │   │   │   '__spec__': ModuleSpec(name='builtins', loader=<class                     │ │
│ │        '_frozen_importlib.BuiltinImporter'>),                                                │ │
│ │        │   │   │   '__build_class__': <built-in function __build_class__>,                   │ │
│ │        │   │   │   '__import__': <built-in function __import__>,                             │ │
│ │        │   │   │   'abs': <built-in function abs>,                                           │ │
│ │        │   │   │   'all': <built-in function all>,                                           │ │
│ │        │   │   │   'any': <built-in function any>,                                           │ │
│ │        │   │   │   ... +142                                                                  │ │
│ │        │   │   },                                                                            │ │
│ │        │   │   'annotations': _Feature((3, 7, 0, 'beta', 1), (3, 10, 0, 'alpha', 0),         │ │
│ │        16777216),                                                                            │ │
│ │        │   │   'context': <module 'alembic.context' from                                     │ │
│ │        '/home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/alembic/conte… │ │
│ │        │   │   ... +6                                                                        │ │
│ │        │   }                                                                                 │ │
│ │        )                                                                                     │ │
│ │    f = <built-in function exec>                                                              │ │
│ │ kwds = {}                                                                                    │ │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────╯ │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/meltano/migrations/env.py: │
│ 60 in <module>                                                                                   │
│                                                                                                  │
│   57 if context.is_offline_mode():                                                               │
│   58 │   run_migrations_offline()                                                                │
│   59 else:                                                                                       │
│ ❱ 60 │   run_migrations_online()                                                                 │
│   61                                                                                             │
│                                                                                                  │
│ ╭─────────────────────────────────────────── locals ───────────────────────────────────────────╮ │
│ │           __builtins__ = {                                                                   │ │
│ │                          │   '__name__': 'builtins',                                         │ │
│ │                          │   '__doc__': 'Built-in functions, exceptions, and other           │ │
│ │                          objects.\n\nNoteworthy: None is the `nil'+46,                       │ │
│ │                          │   '__package__': '',                                              │ │
│ │                          │   '__loader__': <class '_frozen_importlib.BuiltinImporter'>,      │ │
│ │                          │   '__spec__': ModuleSpec(name='builtins', loader=<class           │ │
│ │                          '_frozen_importlib.BuiltinImporter'>),                              │ │
│ │                          │   '__build_class__': <built-in function __build_class__>,         │ │
│ │                          │   '__import__': <built-in function __import__>,                   │ │
│ │                          │   'abs': <built-in function abs>,                                 │ │
│ │                          │   'all': <built-in function all>,                                 │ │
│ │                          │   'any': <built-in function any>,                                 │ │
│ │                          │   ... +142                                                        │ │
│ │                          }                                                                   │ │
│ │             __cached__ = '/home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-pack… │ │
│ │                __doc__ = None                                                                │ │
│ │               __file__ = '/home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-pack… │ │
│ │             __loader__ = <_frozen_importlib_external.SourceFileLoader object at              │ │
│ │                          0x7f15d1ff50a0>                                                     │ │
│ │               __name__ = 'env_py'                                                            │ │
│ │            __package__ = ''                                                                  │ │
│ │               __spec__ = ModuleSpec(name='env_py',                                           │ │
│ │                          loader=<_frozen_importlib_external.SourceFileLoader object at       │ │
│ │                          0x7f15d1ff50a0>,                                                    │ │
│ │                          origin='/home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/si… │ │
│ │ _run_migrations_online = <function _run_migrations_online at 0x7f15d1fefd30>                 │ │
│ │            annotations = _Feature((3, 7, 0, 'beta', 1), (3, 10, 0, 'alpha', 0), 16777216)    │ │
│ │                 config = <alembic.config.Config object at 0x7f15d21c9490>                    │ │
│ │                context = <module 'alembic.context' from                                      │ │
│ │                          '/home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-pack… │ │
│ │     engine_from_config = <function engine_from_config at 0x7f15d4550040>                     │ │
│ │                   pool = <module 'sqlalchemy.pool' from                                      │ │
│ │                          '/home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-pack… │ │
│ │ run_migrations_offline = <function run_migrations_offline at 0x7f15d1fefc10>                 │ │
│ │  run_migrations_online = <function run_migrations_online at 0x7f15d1fefca0>                  │ │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────╯ │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/meltano/migrations/env.py: │
│ 37 in run_migrations_online                                                                      │
│                                                                                                  │
│   34 │   """                                                                                     │
│   35 │   connection = config.attributes.get("connection")                                        │
│   36 │   if connection:                                                                          │
│ ❱ 37 │   │   _run_migrations_online(connection)                                                  │
│   38 │   │   return                                                                              │
│   39 │                                                                                           │
│   40 │   connectable = engine_from_config(                                                       │
│                                                                                                  │
│ ╭───────────────────────────────── locals ──────────────────────────────────╮                    │
│ │ connection = <sqlalchemy.engine.base.Connection object at 0x7f15d237cfa0> │                    │
│ ╰───────────────────────────────────────────────────────────────────────────╯                    │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/meltano/migrations/env.py: │
│ 54 in _run_migrations_online                                                                     │
│                                                                                                  │
│   51 │   context.configure(connection=connection)                                                │
│   52 │                                                                                           │
│   53 │   with context.begin_transaction():                                                       │
│ ❱ 54 │   │   context.run_migrations()                                                            │
│   55                                                                                             │
│   56                                                                                             │
│   57 if context.is_offline_mode():                                                               │
│                                                                                                  │
│ ╭───────────────────────────────── locals ──────────────────────────────────╮                    │
│ │ connection = <sqlalchemy.engine.base.Connection object at 0x7f15d237cfa0> │                    │
│ ╰───────────────────────────────────────────────────────────────────────────╯                    │
│ <string>:8 in run_migrations                                                                     │
│ ╭───────────────────────────────────── locals ─────────────────────────────────────╮             │
│ │ args = ()                                                                        │             │
│ │   kw = {}                                                                        │             │
│ │    p = <alembic.runtime.environment.EnvironmentContext object at 0x7f15d21c9f70> │             │
│ ╰──────────────────────────────────────────────────────────────────────────────────╯             │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/alembic/runtime/environmen │
│ t.py:853 in run_migrations                                                                       │
│                                                                                                  │
│   850 │   │   """                                                                                │
│   851 │   │   assert self._migration_context is not None                                         │
│   852 │   │   with Operations.context(self._migration_context):                                  │
│ ❱ 853 │   │   │   self.get_context().run_migrations(**kw)                                        │
│   854 │                                                                                          │
│   855 │   def execute(self, sql, execution_options=None):                                        │
│   856 │   │   """Execute the given SQL using the current change context.                         │
│                                                                                                  │
│ ╭───────────────────────────────────── locals ─────────────────────────────────────╮             │
│ │   kw = {}                                                                        │             │
│ │ self = <alembic.runtime.environment.EnvironmentContext object at 0x7f15d21c9f70> │             │
│ ╰──────────────────────────────────────────────────────────────────────────────────╯             │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/alembic/runtime/migration. │
│ py:623 in run_migrations                                                                         │
│                                                                                                  │
│    620 │   │   │   │   │   self.impl.static_output(                                              │
│    621 │   │   │   │   │   │   "-- Running %s" % (step.short_log,)                               │
│    622 │   │   │   │   │   )                                                                     │
│ ❱  623 │   │   │   │   step.migration_fn(**kw)                                                   │
│    624 │   │   │   │                                                                             │
│    625 │   │   │   │   # previously, we wouldn't stamp per migration                             │
│    626 │   │   │   │   # if we were in a transaction, however given the more                     │
│                                                                                                  │
│ ╭──────────────────────────────────────── locals ─────────────────────────────────────────╮      │
│ │     dont_mutate = False                                                                 │      │
│ │ head_maintainer = <alembic.runtime.migration.HeadMaintainer object at 0x7f15d1ff56a0>   │      │
│ │           heads = ('ceb00d7ff3bd',)                                                     │      │
│ │              kw = {}                                                                    │      │
│ │            self = <alembic.runtime.migration.MigrationContext object at 0x7f15d1ff5190> │      │
│ │            step = RevisionStep('23ea52e6d784', is_upgrade=True)                         │      │
│ ╰─────────────────────────────────────────────────────────────────────────────────────────╯      │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/meltano/migrations/version │
│ s/23ea52e6d784_add_resource_type_to_embed_token.py:30 in upgrade                                 │
│                                                                                                  │
│   27 │   dialect_name = get_dialect_name()                                                       │
│   28 │   max_string_length = max_string_length_for_dialect(dialect_name)                         │
│   29 │                                                                                           │
│ ❱ 30 │   op.add_column(                                                                          │
│   31 │   │   "embed_tokens", sa.Column("resource_type", sa.String(max_string_length))            │
│   32 │   )                                                                                       │
│   33                                                                                             │
│                                                                                                  │
│ ╭─────────── locals ───────────╮                                                                 │
│ │      dialect_name = 'sqlite' │                                                                 │
│ │ max_string_length = None     │                                                                 │
│ ╰──────────────────────────────╯                                                                 │
│ <string>:8 in add_column                                                                         │
│ ╭───────────────────────────────────── locals ─────────────────────────────────────╮             │
│ │ args = ('embed_tokens', Column('resource_type', String(), table=<embed_tokens>)) │             │
│ │   kw = {}                                                                        │             │
│ │    p = <alembic.operations.base.Operations object at 0x7f15d1ff5340>             │             │
│ ╰──────────────────────────────────────────────────────────────────────────────────╯             │
│ <string>:3 in add_column                                                                         │
│ ╭────────────────────────────────── locals ──────────────────────────────────╮                   │
│ │     column = Column('resource_type', String(), table=<embed_tokens>)       │                   │
│ │     schema = None                                                          │                   │
│ │       self = <alembic.operations.base.Operations object at 0x7f15d1ff5340> │                   │
│ │ table_name = 'embed_tokens'                                                │                   │
│ ╰────────────────────────────────────────────────────────────────────────────╯                   │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/alembic/operations/ops.py: │
│ 2047 in add_column                                                                               │
│                                                                                                  │
│   2044 │   │   """                                                                               │
│   2045 │   │                                                                                     │
│   2046 │   │   op = cls(table_name, column, schema=schema)                                       │
│ ❱ 2047 │   │   return operations.invoke(op)                                                      │
│   2048 │                                                                                         │
│   2049 │   @classmethod                                                                          │
│   2050 │   def batch_add_column(                                                                 │
│                                                                                                  │
│ ╭────────────────────────────────── locals ──────────────────────────────────╮                   │
│ │        cls = <class 'alembic.operations.ops.AddColumnOp'>                  │                   │
│ │     column = Column('resource_type', String(), table=<embed_tokens>)       │                   │
│ │         op = <alembic.operations.ops.AddColumnOp object at 0x7f15d1fa5b80> │                   │
│ │ operations = <alembic.operations.base.Operations object at 0x7f15d1ff5340> │                   │
│ │     schema = None                                                          │                   │
│ │ table_name = 'embed_tokens'                                                │                   │
│ ╰────────────────────────────────────────────────────────────────────────────╯                   │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/alembic/operations/base.py │
│ :399 in invoke                                                                                   │
│                                                                                                  │
│   396 │   │   fn = self._to_impl.dispatch(                                                       │
│   397 │   │   │   operation, self.migration_context.impl.__dialect__                             │
│   398 │   │   )                                                                                  │
│ ❱ 399 │   │   return fn(self, operation)                                                         │
│   400 │                                                                                          │
│   401 │   def f(self, name: str) -> "conv":                                                      │
│   402 │   │   """Indicate a string name that has already had a naming convention                 │
│                                                                                                  │
│ ╭───────────────────────────────── locals ──────────────────────────────────╮                    │
│ │        fn = <function add_column at 0x7f15d3162ee0>                       │                    │
│ │ operation = <alembic.operations.ops.AddColumnOp object at 0x7f15d1fa5b80> │                    │
│ │      self = <alembic.operations.base.Operations object at 0x7f15d1ff5340> │                    │
│ ╰───────────────────────────────────────────────────────────────────────────╯                    │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/alembic/operations/toimpl. │
│ py:154 in add_column                                                                             │
│                                                                                                  │
│   151 │   │   column = _copy(column)                                                             │
│   152 │                                                                                          │
│   153 │   t = operations.schema_obj.table(table_name, column, schema=schema)                     │
│ ❱ 154 │   operations.impl.add_column(table_name, column, schema=schema, **kw)                    │
│   155 │                                                                                          │
│   156 │   for constraint in t.constraints:                                                       │
│   157 │   │   if not isinstance(constraint, sa_schema.PrimaryKeyConstraint):                     │
│                                                                                                  │
│ ╭─────────────────────────────────────────── locals ───────────────────────────────────────────╮ │
│ │     column = Column('resource_type', String(), table=<embed_tokens>)                         │ │
│ │         kw = {}                                                                              │ │
│ │  operation = <alembic.operations.ops.AddColumnOp object at 0x7f15d1fa5b80>                   │ │
│ │ operations = <alembic.operations.base.Operations object at 0x7f15d1ff5340>                   │ │
│ │     schema = None                                                                            │ │
│ │          t = Table('embed_tokens', MetaData(), Column('resource_type', String(),             │ │
│ │              table=<embed_tokens>), schema=None)                                             │ │
│ │ table_name = 'embed_tokens'                                                                  │ │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────╯ │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/alembic/ddl/impl.py:322 in │
│ add_column                                                                                       │
│                                                                                                  │
│   319 │   │   column: "Column",                                                                  │
│   320 │   │   schema: Optional[Union[str, "quoted_name"]] = None,                                │
│   321 │   ) -> None:                                                                             │
│ ❱ 322 │   │   self._exec(base.AddColumn(table_name, column, schema=schema))                      │
│   323 │                                                                                          │
│   324 │   def drop_column(                                                                       │
│   325 │   │   self,                                                                              │
│                                                                                                  │
│ ╭─────────────────────────────── locals ────────────────────────────────╮                        │
│ │     column = Column('resource_type', String(), table=<embed_tokens>)  │                        │
│ │     schema = None                                                     │                        │
│ │       self = <alembic.ddl.sqlite.SQLiteImpl object at 0x7f15d1ff54c0> │                        │
│ │ table_name = 'embed_tokens'                                           │                        │
│ ╰───────────────────────────────────────────────────────────────────────╯                        │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/alembic/ddl/impl.py:195 in │
│ _exec                                                                                            │
│                                                                                                  │
│   192 │   │   │   │   assert isinstance(multiparams, tuple)                                      │
│   193 │   │   │   │   multiparams += (params,)                                                   │
│   194 │   │   │                                                                                  │
│ ❱ 195 │   │   │   return conn.execute(construct, multiparams)                                    │
│   196 │                                                                                          │
│   197 │   def execute(                                                                           │
│   198 │   │   self,                                                                              │
│                                                                                                  │
│ ╭───────────────────────────────────── locals ─────────────────────────────────────╮             │
│ │              conn = <sqlalchemy.engine.base.Connection object at 0x7f15d237cfa0> │             │
│ │         construct = <alembic.ddl.base.AddColumn object at 0x7f15d1fa5be0>        │             │
│ │ execution_options = None                                                         │             │
│ │       multiparams = ()                                                           │             │
│ │            params = immutabledict({})                                            │             │
│ │              self = <alembic.ddl.sqlite.SQLiteImpl object at 0x7f15d1ff54c0>     │             │
│ ╰──────────────────────────────────────────────────────────────────────────────────╯             │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py: │
│ 1380 in execute                                                                                  │
│                                                                                                  │
│   1377 │   │   │   │   exc.ObjectNotExecutableError(statement), replace_context=err              │
│   1378 │   │   │   )                                                                             │
│   1379 │   │   else:                                                                             │
│ ❱ 1380 │   │   │   return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)                 │
│   1381 │                                                                                         │
│   1382 │   def _execute_function(self, func, multiparams, params, execution_options):            │
│   1383 │   │   """Execute a sql.FunctionElement object."""                                       │
│                                                                                                  │
│ ╭─────────────────────────────────────────── locals ───────────────────────────────────────────╮ │
│ │        meth = <bound method DDLElement._execute_on_connection of <alembic.ddl.base.AddColumn │ │
│ │               object at 0x7f15d1fa5be0>>                                                     │ │
│ │ multiparams = ((),)                                                                          │ │
│ │      params = {}                                                                             │ │
│ │        self = <sqlalchemy.engine.base.Connection object at 0x7f15d237cfa0>                   │ │
│ │   statement = <alembic.ddl.base.AddColumn object at 0x7f15d1fa5be0>                          │ │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────╯ │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/sqlalchemy/sql/ddl.py:80   │
│ in _execute_on_connection                                                                        │
│                                                                                                  │
│     77 │   def _execute_on_connection(                                                           │
│     78 │   │   self, connection, multiparams, params, execution_options                          │
│     79 │   ):                                                                                    │
│ ❱   80 │   │   return connection._execute_ddl(                                                   │
│     81 │   │   │   self, multiparams, params, execution_options                                  │
│     82 │   │   )                                                                                 │
│     83                                                                                           │
│                                                                                                  │
│ ╭───────────────────────────────────── locals ─────────────────────────────────────╮             │
│ │        connection = <sqlalchemy.engine.base.Connection object at 0x7f15d237cfa0> │             │
│ │ execution_options = immutabledict({})                                            │             │
│ │       multiparams = ((),)                                                        │             │
│ │            params = {}                                                           │             │
│ │              self = <alembic.ddl.base.AddColumn object at 0x7f15d1fa5be0>        │             │
│ ╰──────────────────────────────────────────────────────────────────────────────────╯             │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py: │
│ 1472 in _execute_ddl                                                                             │
│                                                                                                  │
│   1469 │   │   compiled = ddl.compile(                                                           │
│   1470 │   │   │   dialect=dialect, schema_translate_map=schema_translate_map                    │
│   1471 │   │   )                                                                                 │
│ ❱ 1472 │   │   ret = self._execute_context(                                                      │
│   1473 │   │   │   dialect,                                                                      │
│   1474 │   │   │   dialect.execution_ctx_cls._init_ddl,                                          │
│   1475 │   │   │   compiled,                                                                     │
│                                                                                                  │
│ ╭─────────────────────────────────────────── locals ───────────────────────────────────────────╮ │
│ │             compiled = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at          │ │
│ │                        0x7f15d1fa5d00>                                                       │ │
│ │                  ddl = <alembic.ddl.base.AddColumn object at 0x7f15d1fa5be0>                 │ │
│ │              dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at │ │
│ │                        0x7f15d221a520>                                                       │ │
│ │ distilled_parameters = ()                                                                    │ │
│ │            exec_opts = immutabledict({'autocommit': True})                                   │ │
│ │    execution_options = immutabledict({'autocommit': True})                                   │ │
│ │          multiparams = ((),)                                                                 │ │
│ │               params = {}                                                                    │ │
│ │ schema_translate_map = None                                                                  │ │
│ │                 self = <sqlalchemy.engine.base.Connection object at 0x7f15d237cfa0>          │ │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────╯ │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py: │
│ 1943 in _execute_context                                                                         │
│                                                                                                  │
│   1940 │   │   │   │   │   branched.close()                                                      │
│   1941 │   │                                                                                     │
│   1942 │   │   except BaseException as e:                                                        │
│ ❱ 1943 │   │   │   self._handle_dbapi_exception(                                                 │
│   1944 │   │   │   │   e, statement, parameters, cursor, context                                 │
│   1945 │   │   │   )                                                                             │
│   1946                                                                                           │
│                                                                                                  │
│ ╭─────────────────────────────────────────── locals ───────────────────────────────────────────╮ │
│ │              args = (                                                                        │ │
│ │                     │   <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at         │ │
│ │                     0x7f15d1fa5d00>,                                                         │ │
│ │                     )                                                                        │ │
│ │          branched = <sqlalchemy.engine.base.Connection object at 0x7f15d237cfa0>             │ │
│ │              conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7f15d21c9550>         │ │
│ │       constructor = <bound method DefaultExecutionContext._init_ddl of <class                │ │
│ │                     'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>               │ │
│ │           context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at        │ │
│ │                     0x7f15d1fa5e80>                                                          │ │
│ │            cursor = <sqlite3.Cursor object at 0x7f15d21c6a40>                                │ │
│ │           dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at    │ │
│ │                     0x7f15d221a520>                                                          │ │
│ │       evt_handled = False                                                                    │ │
│ │ execution_options = immutabledict({'autocommit': True})                                      │ │
│ │                kw = {}                                                                       │ │
│ │        parameters = ()                                                                       │ │
│ │              self = <sqlalchemy.engine.base.Connection object at 0x7f15d237cfa0>             │ │
│ │         statement = 'ALTER TABLE embed_tokens ADD COLUMN resource_type VARCHAR'              │ │
│ │                yp = None                                                                     │ │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────╯ │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py: │
│ 2124 in _handle_dbapi_exception                                                                  │
│                                                                                                  │
│   2121 │   │   │   if newraise:                                                                  │
│   2122 │   │   │   │   util.raise_(newraise, with_traceback=exc_info[2], from_=e)                │
│   2123 │   │   │   elif should_wrap:                                                             │
│ ❱ 2124 │   │   │   │   util.raise_(                                                              │
│   2125 │   │   │   │   │   sqlalchemy_exception, with_traceback=exc_info[2], from_=e             │
│   2126 │   │   │   │   )                                                                         │
│   2127 │   │   │   else:                                                                         │
│                                                                                                  │
│ ╭─────────────────────────────────────────── locals ───────────────────────────────────────────╮ │
│ │                       context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext      │ │
│ │                                 object at 0x7f15d1fa5e80>                                    │ │
│ │                        cursor = <sqlite3.Cursor object at 0x7f15d21c6a40>                    │ │
│ │                             e = OperationalError('duplicate column name: resource_type')     │ │
│ │                      exc_info = (                                                            │ │
│ │                                 │   <class 'sqlite3.OperationalError'>,                      │ │
│ │                                 │   OperationalError('duplicate column name:                 │ │
│ │                                 resource_type'),                                             │ │
│ │                                 │   <traceback object at 0x7f15d1fb1280>                     │ │
│ │                                 )                                                            │ │
│ │ invalidate_pool_on_disconnect = True                                                         │ │
│ │             is_exit_exception = False                                                        │ │
│ │                      newraise = None                                                         │ │
│ │                    parameters = ()                                                           │ │
│ │                          self = <sqlalchemy.engine.base.Connection object at 0x7f15d237cfa0> │ │
│ │                   should_wrap = True                                                         │ │
│ │          sqlalchemy_exception = OperationalError('(sqlite3.OperationalError) duplicate       │ │
│ │                                 column name: resource_type')                                 │ │
│ │                     statement = 'ALTER TABLE embed_tokens ADD COLUMN resource_type VARCHAR'  │ │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────╯ │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py: │
│ 208 in raise_                                                                                    │
│                                                                                                  │
│   205 │   │   │   exception.__cause__ = replace_context                                          │
│   206 │   │                                                                                      │
│   207 │   │   try:                                                                               │
│ ❱ 208 │   │   │   raise exception                                                                │
│   209 │   │   finally:                                                                           │
│   210 │   │   │   # credit to                                                                    │
│   211 │   │   │   # https://cosmicpercolator.com/2016/01/13/exception-leaks-in-python-2-and-3/   │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py: │
│ 1900 in _execute_context                                                                         │
│                                                                                                  │
│   1897 │   │   │   │   │   │   │   evt_handled = True                                            │
│   1898 │   │   │   │   │   │   │   break                                                         │
│   1899 │   │   │   │   if not evt_handled:                                                       │
│ ❱ 1900 │   │   │   │   │   self.dialect.do_execute(                                              │
│   1901 │   │   │   │   │   │   cursor, statement, parameters, context                            │
│   1902 │   │   │   │   │   )                                                                     │
│   1903                                                                                           │
│                                                                                                  │
│ ╭─────────────────────────────────────────── locals ───────────────────────────────────────────╮ │
│ │              args = (                                                                        │ │
│ │                     │   <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at         │ │
│ │                     0x7f15d1fa5d00>,                                                         │ │
│ │                     )                                                                        │ │
│ │          branched = <sqlalchemy.engine.base.Connection object at 0x7f15d237cfa0>             │ │
│ │              conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7f15d21c9550>         │ │
│ │       constructor = <bound method DefaultExecutionContext._init_ddl of <class                │ │
│ │                     'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>               │ │
│ │           context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at        │ │
│ │                     0x7f15d1fa5e80>                                                          │ │
│ │            cursor = <sqlite3.Cursor object at 0x7f15d21c6a40>                                │ │
│ │           dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at    │ │
│ │                     0x7f15d221a520>                                                          │ │
│ │       evt_handled = False                                                                    │ │
│ │ execution_options = immutabledict({'autocommit': True})                                      │ │
│ │                kw = {}                                                                       │ │
│ │        parameters = ()                                                                       │ │
│ │              self = <sqlalchemy.engine.base.Connection object at 0x7f15d237cfa0>             │ │
│ │         statement = 'ALTER TABLE embed_tokens ADD COLUMN resource_type VARCHAR'              │ │
│ │                yp = None                                                                     │ │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────╯ │
│                                                                                                  │
│ /home/evan/workspace/awsdx-hackathon/venv/lib/python3.8/site-packages/sqlalchemy/engine/default. │
│ py:736 in do_execute                                                                             │
│                                                                                                  │
│    733 │   │   cursor.executemany(statement, parameters)                                         │
│    734 │                                                                                         │
│    735 │   def do_execute(self, cursor, statement, parameters, context=None):                    │
│ ❱  736 │   │   cursor.execute(statement, parameters)                                             │
│    737 │                                                                                         │
│    738 │   def do_execute_no_params(self, cursor, statement, context=None):                      │
│    739 │   │   cursor.execute(statement)                                                         │
│                                                                                                  │
│ ╭─────────────────────────────────────────── locals ───────────────────────────────────────────╮ │
│ │    context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at               │ │
│ │              0x7f15d1fa5e80>                                                                 │ │
│ │     cursor = <sqlite3.Cursor object at 0x7f15d21c6a40>                                       │ │
│ │ parameters = ()                                                                              │ │
│ │       self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at           │ │
│ │              0x7f15d221a520>                                                                 │ │
│ │  statement = 'ALTER TABLE embed_tokens ADD COLUMN resource_type VARCHAR'                     │ │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────╯ │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
OperationalError: (sqlite3.OperationalError) duplicate column name: resource_type
[SQL: ALTER TABLE embed_tokens ADD COLUMN resource_type VARCHAR]
(Background on this error at: https://sqlalche.me/e/14/e3q8)

Need help fixing this problem? Visit http://melta.no/ for troubleshooting steps, or to
join our friendly Slack community.

Cannot upgrade the system database. It might be corrupted or was created before database migrations where introduced (v0.34.0)

